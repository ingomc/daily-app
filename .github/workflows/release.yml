name: 'Daily App Release Build'

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.6.0)'
        required: true
        type: string

jobs:
  build-and-release:
    name: Build Daily App Release
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-darwin

      - name: Install Frontend Dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

      - name: Build Tauri App
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload DMG Installer
        uses: actions/upload-artifact@v4
        with:
          name: daily-app-${{ steps.release_info.outputs.tag_name }}-dmg
          path: src-tauri/target/release/bundle/dmg/*.dmg
          retention-days: 90
          compression-level: 0

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: daily-app-${{ steps.release_info.outputs.tag_name }}-app
          path: src-tauri/target/release/bundle/macos/*.app
          retention-days: 90
          compression-level: 6

      - name: Create Release (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Daily App ${{ github.event.inputs.version }}
          body: |
            ## Daily App ${{ github.event.inputs.version }}
            
            ### 📦 Downloads
            - **DMG Installer**: `Daily App_${{ github.event.inputs.version }}_aarch64.dmg` (Apple Silicon)
            - **App Bundle**: `Daily App.app` (Native macOS Application)
            
            ### 🚀 Installation
            1. Download the DMG file
            2. Mount the DMG (double-click)
            3. Drag Daily App.app to Applications folder
            4. Launch from Applications
            
            ### 📋 System Requirements
            - macOS 10.15 Catalina or later
            - Apple Silicon (ARM64) recommended
            
            Built automatically via GitHub Actions 🤖
          files: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
          draft: false
          prerelease: false

      - name: Update Release with Build Info (if release event)
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find DMG file
            const dmgDir = 'src-tauri/target/release/bundle/dmg';
            let dmgFile = 'Daily App DMG';
            
            try {
              if (fs.existsSync(dmgDir)) {
                const dmgFiles = fs.readdirSync(dmgDir).filter(f => f.endsWith('.dmg'));
                if (dmgFiles.length > 0) {
                  dmgFile = dmgFiles[0];
                }
              }
            } catch (error) {
              console.log('Could not read DMG directory:', error.message);
            }
            
            const buildInfo = `

---

## 🤖 Automated Build Complete!

**Build Status**: ✅ Success  
**Platform**: macOS (Apple Silicon)  
**Artifacts**: 2 files uploaded  
**Build Time**: ${new Date().toISOString()}

### 📦 Available Downloads:
- **DMG Installer**: \\\`${dmgFile}\\\`
- **App Bundle**: \\\`Daily App.app\\\`

### 📥 How to Download:
1. Go to [Actions tab](${context.payload.repository.html_url}/actions)
2. Click on the latest workflow run
3. Download artifacts from the "Artifacts" section

### 🚀 Installation:
1. Download and mount the DMG file
2. Drag Daily App.app to Applications folder
3. Launch from Applications folder

*Built automatically via GitHub Actions* 🤖`;
            
            // Update the release body with build information
            const currentBody = context.payload.release.body || '';
            const updatedBody = currentBody + buildInfo;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: updatedBody
            });

      - name: Build Summary
        run: |
          echo "## 🎉 Daily App Release Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.release_info.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: macOS (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- DMG Installer (ready for distribution)" >> $GITHUB_STEP_SUMMARY
          echo "- App Bundle (native macOS application)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 File Sizes:" >> $GITHUB_STEP_SUMMARY
          if [ -d "src-tauri/target/release/bundle/dmg" ]; then
            for file in src-tauri/target/release/bundle/dmg/*.dmg; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                echo "- $(basename "$file"): $size" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the DMG installer on a clean macOS system" >> $GITHUB_STEP_SUMMARY
          echo "3. Distribute to users or upload to release page" >> $GITHUB_STEP_SUMMARY

  # Optional: Build for Intel Macs (x86_64)
  build-intel:
    name: Build for Intel Macs (Optional)
    runs-on: macos-latest
    if: github.event.inputs.build_intel == 'true' || contains(github.event.release.body, 'intel')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-apple-darwin

      - name: Install Frontend Dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

      - name: Build Tauri App (Intel)
        run: npm run tauri build -- --target x86_64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Intel DMG
        uses: actions/upload-artifact@v4
        with:
          name: daily-app-${{ github.ref_name }}-intel-dmg
          path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
          retention-days: 90
